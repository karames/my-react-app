# Presentación del Proyecto React CRUD con Vite

## 1. Descripción general

Este proyecto es una aplicación CRUD realizada con React y Vite, que utiliza `json-server` y `json-server-auth` para la gestión de datos y autenticación mediante JWT. Cumple todos los requisitos básicos y varios de ampliación, con una estructura clara y componentes reutilizables.

---

## 2. Estructura y requisitos

- **CRUD completo**: Alta, baja, modificación y consulta de registros usando `json-server`.
- **Autenticación previa**: Login obligatorio con usuario y contraseña, gestionado con JWT y `json-server-auth`.
- **Control de errores**: Todos los componentes muestran mensajes de error claros al usuario.
- **Styled Components**: Todos los estilos están implementados con Styled Components.
- **Apariencia**: Incluye barra de navegación, botones estilizados y feedback visual.
- **Prop-types**: Todos los componentes que reciben props usan validación con `prop-types`.
- **Estructura React**: Uso de hooks, props y componentes funcionales.
- **Uso de localStorage**: El token JWT se almacena y gestiona en localStorage.

---

## 3. Componentes y fases de comprobación

| Componente         | Fase / Ruta         | Qué comprobar                                      |
|--------------------|---------------------|----------------------------------------------------|
| `Auth`             | `/login`            | Login, feedback de error, almacenamiento de token  |
| `App`              | Todas               | Rutas, navegación, cierre de sesión                |
| `Read`             | `/read`             | Listado, feedback de error, botones editar/borrar  |
| `Create`           | `/create`           | Alta de registros, feedback de error               |
| `Update`           | `/update/:id`       | Modificación, feedback de error                    |
| `Delete`           | Desde `/read`       | Baja de registros, feedback de error               |
| `Profile`          | `/profile`          | Visualización de perfil                            |
| `GlobalStyles`     | Todas               | Apariencia y estilos globales                      |

---

## 4. Árbol de componentes

```
App.jsx
│
├── Auth.jsx
├── Profile.jsx
├── Read.jsx
│   └── Delete.jsx
├── Create.jsx
├── Update.jsx
├── Delete.jsx
└── GlobalStyles.js
```

- **Leyenda**:
  - Componentes propios en negro.
  - Todos los estilos con Styled Components (no se usan otras librerías de componentes).

---

## 5. Lanzamiento del servidor json-server

El archivo de la API (`db.json` y `server.js`) está en `src/assets/`.
Para lanzar el backend, ejecutar:

**En PowerShell:**

```powershell
cd src/assets
npx json-server-auth --watch db.json --port 3001
```

**En CMD:**

```cmd
cd src\assets
npx json-server-auth --watch db.json --port 3001
```

**En Bash (Linux/Mac):**

```bash
cd src/assets
npx json-server-auth --watch db.json --port 3001
```

---

## 6. Notas finales

- El proyecto se inicia en `App.jsx`.
- Todos los componentes están en `src/components`.
- El token JWT se almacena en localStorage y se elimina al cerrar sesión.
- El diseño es responsive y visualmente agradable.

---
